{"version":3,"sources":["components/UploadFile.tsx","components/ImageWithDescription.tsx","components/Chart.tsx","components/QuestionBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UploadFile","props","uppy","Uppy","id","autoProceed","allowMultipleUploads","debug","restrictions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","infoTimeout","use","XHRUpload","endpoint","serverUrl","method","responseType","formData","fieldName","on","_","resetForm","args","console","error","reset","response","data","reader","FileReader","readAsDataURL","onloadend","e","target","result","setCurrentImage","setImageDescription","body","description","setImageId","fileName","className","allowMultipleFiles","height","ImageWithDescription","image","src","alt","Chart","chartData","labels","answers","map","x","answer","datasets","label","probability","backgroundColor","slice","length","type","Pie","QuestionBlock","isImageLoaded","onChange","setQuestion","value","onKeyDown","key","askQuestion","onClick","App","useState","undefined","imageId","imageDescription","currentImage","question","setAnswers","Axios","post","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4680a984.chunk.js","sourcesContent":["import DragDropComponent from \"@uppy/react/src/DragDrop\";\nimport React from \"react\";\nimport Uppy from \"@uppy/core\";\nimport XHRUpload from \"@uppy/xhr-upload\";\n\nfunction UploadFile(props: {\n    serverUrl: string,\n    resetForm: () => void,\n    setImageDescription: (description: string) => void,\n    setImageId: (imageId: string) => void,\n    setCurrentImage: (image: string) => void\n}) {\n\n    const uppy = Uppy<Uppy.StrictTypes>({\n        id: 'uppy',\n        autoProceed: true,\n        allowMultipleUploads: false,\n        debug: false,\n        restrictions: {\n            maxFileSize: null,\n            minFileSize: null,\n            maxTotalFileSize: null,\n            maxNumberOfFiles: null,\n            minNumberOfFiles: null,\n            allowedFileTypes: ['image/*']\n        },\n        meta: {},\n        infoTimeout: 5000\n    })\n    uppy.use(XHRUpload, {\n        endpoint: `${props.serverUrl}/upload-image`,\n        method: \"post\",\n        responseType: \"text\",\n        formData: true,\n        fieldName: 'file'\n    }).on(\"file-added\", _ => {\n        props.resetForm();\n    }).on(\"upload-error\", args => {\n        console.error(\"Something went horribly wrong, try again\");\n        uppy.reset()\n    }).on(\"upload-success\", (args, response) => {\n            if (args?.data) {\n                const reader = new FileReader();\n                reader.readAsDataURL(args.data)\n                reader.onloadend = e => {\n                    if (e?.target?.result) {\n                        if (typeof e.target.result === \"string\") {\n                            props.setCurrentImage(e?.target?.result)\n                        }\n                    }\n                }\n            }\n            props.setImageDescription(response.body.description)\n            props.setImageId(response.body.fileName)\n            uppy.reset()\n        }\n    )\n\n\n    return (\n        <>\n            <h1 className={'subtitle is-4'}>Upload your file: </h1>\n            <DragDropComponent uppy={uppy} allowMultipleFiles={false} height={'150px'}/>\n        </>\n    )\n}\n\nexport default UploadFile;\n","import React from \"react\";\n\nfunction ImageWithDescription(props: { image: string | undefined, description: string }) {\n    if (!props.image || !props.description) {\n        return null\n    }\n\n    return (\n        <div className={'px-2 block'}>\n            <h2 className={'subtitle is-5'}>Uploaded image:</h2>\n            <div className={'is-flex is-justify-content-center'}>\n                <div className={'has-text-centered'}>\n                    <figure className={'image'}>\n                        <img src={props.image} className={'responsive-image'}\n                             alt={\"Uploaded\"}/>\n                    </figure>\n                    <p className=\"has-text-weight-semibold pt-2 image-description has-text-centered\">{props.description}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageWithDescription;\n","import {QuestionResponse} from \"../App\";\nimport {Pie} from \"@reactchartjs/react-chart.js\";\n\nfunction Chart(props: { data: QuestionResponse | undefined }) {\n    if (!props.data) {\n        return null;\n    }\n    const possibleColors = [\n        '#914e72',\n        '#0078bf',\n        '#00a95c',\n        '#3255a4',\n        '#f15060',\n        '#765ba7',\n        '#00838a',\n        '#bb8b41',\n        '#407060',\n        '#ff665e'\n    ]\n    const chartData = {\n        labels: props.data.answers.map(x => x.answer),\n        datasets: [\n            {\n                label: 'Probability',\n                data: props.data.answers.map(x => x.probability),\n                backgroundColor: possibleColors.slice(0, props.data.answers.length)\n            }\n        ]\n    }\n\n    return (\n        <>\n            <Pie type={Pie} data={chartData}/>\n        </>\n    )\n}\n\nexport default Chart;\n","import Chart from \"./Chart\";\nimport React, {ChangeEvent} from \"react\";\nimport {QuestionResponse} from \"../App\";\n\nfunction QuestionBlock(props: {\n    isImageLoaded: boolean,\n    answers: QuestionResponse | undefined\n    setQuestion: (question: string) => void\n    askQuestion: () => void\n}) {\n\n    if (!props.isImageLoaded) {\n        return null\n    }\n\n    const questionUpdated = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setQuestion(e.target.value)\n    }\n\n\n    const questionKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            props.askQuestion()\n        }\n    }\n\n    return (\n        <div className={'columns'}>\n            <div className={\"column is-half\"}>\n                <div className={'px-2 ask-question'}>\n                    <label className={'label'}>Ask a question:</label>\n                    <div className={'control'}>\n                        <input className={'input'} type={\"text\"} onChange={questionUpdated}\n                               onKeyDown={questionKeyDown}/>\n                    </div>\n                    <div className={'control pt-1'}>\n                        <button className={'button is-primary'} onClick={props.askQuestion}>Submit\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className={'column is-half'}>\n                <Chart data={props.answers}/>\n            </div>\n        </div>\n    );\n}\n\nexport default QuestionBlock\n","import React, {useState} from 'react';\nimport '@uppy/core/dist/style.css'\nimport '@uppy/drag-drop/dist/style.css'\nimport Axios from \"axios\";\nimport './App.sass';\nimport UploadFile from \"./components/UploadFile\";\nimport ImageWithDescription from \"./components/ImageWithDescription\";\nimport QuestionBlock from \"./components/QuestionBlock\";\n\nconst serverUrl = \"http://pcknot4.fit.vutbr.cz:8502\"\n\ninterface Answer {\n    \"answer\": string,\n    \"probability\": number\n}\n\nexport interface QuestionResponse {\n    answers: Answer[]\n}\n\nfunction App() {\n    const [imageId, setImageId] = useState<string | undefined>(undefined);\n    const [imageDescription, setImageDescription] = useState(\"\");\n    const [currentImage, setCurrentImage] = useState<string | undefined>(undefined);\n    const [question, setQuestion] = useState<string | undefined>(undefined);\n    const [answers, setAnswers] = useState<QuestionResponse | undefined>(undefined)\n\n    const askQuestion = () => {\n        Axios.post<QuestionResponse>(`${serverUrl}/ask-question/${imageId}`, {question: question})\n            .then((value) => {\n                setAnswers(value.data)\n            })\n    }\n\n    const resetForm = () => {\n        setAnswers(undefined)\n        setQuestion(undefined)\n        setImageDescription(\"\")\n        setCurrentImage(undefined)\n    }\n\n    return (\n        <>\n            <div className={'container pt-3'}>\n                <div className={'block box'}>\n                    <UploadFile serverUrl={serverUrl}\n                                resetForm={resetForm}\n                                setImageDescription={setImageDescription}\n                                setCurrentImage={setCurrentImage}\n                                setImageId={setImageId}\n                    />\n                </div>\n                <ImageWithDescription image={currentImage} description={imageDescription}/>\n                <QuestionBlock isImageLoaded={!!currentImage} askQuestion={askQuestion} setQuestion={setQuestion}\n                               answers={answers}/>\n                <footer className=\"footer py-3\">\n                    <div className=\"content has-text-centered\">\n                        <p>\n                            Created by Pavel Kocurek\n                        </p>\n                    </div>\n                </footer>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}